<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ixilink.banknote_box.common.dao.BanknoteLineMapper">
  <resultMap id="BaseResultMap" type="com.ixilink.banknote_box.common.pojo.BanknoteLine">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="library_id" jdbcType="INTEGER" property="libraryId" />
    <result column="atmCount" jdbcType="INTEGER" property="atmCount" />
    <result column="username" jdbcType="VARCHAR" property="username" />
  </resultMap>
  <resultMap id="UserSimple" type="com.ixilink.banknote_box.common.model.UserSimple">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, remarks, create_time, state, library_id
  </sql>
  <select id="selectByExample" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLineExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from banknote_line
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >= 0">
      limit ${limitStart} , ${count}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from banknote_line
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from banknote_line
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLineExample">
    delete from banknote_line
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLine">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into banknote_line (name, remarks, create_time, 
      state, library_id)
    values (#{name,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, 
      #{state,jdbcType=INTEGER}, #{libraryId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLine">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into banknote_line
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="libraryId != null">
        library_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="libraryId != null">
        #{libraryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLineExample" resultType="java.lang.Long">
    select count(*) from banknote_line
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update banknote_line
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.libraryId != null">
        library_id = #{record.libraryId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update banknote_line
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      state = #{record.state,jdbcType=INTEGER},
      library_id = #{record.libraryId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLine">
    update banknote_line
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="libraryId != null">
        library_id = #{libraryId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ixilink.banknote_box.common.pojo.BanknoteLine">
    update banknote_line
    set name = #{name,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      state = #{state,jdbcType=INTEGER},
      library_id = #{libraryId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="find" resultMap="BaseResultMap">
    select
    t.id,t.name,t.remarks,t.create_time,t.state,t.atmCount,t.username
    from (SELECT bl.`id`,bl.`name`,bl.`remarks`,bl.`create_time`,bl.`library_id`,bl.state,c.atmCount,GROUP_CONCAT(u.`name` SEPARATOR ",") AS username FROM banknote_line bl
    LEFT JOIN banknote_line_user blu ON bl.`id`=blu.`line_id`
    LEFT JOIN USER u ON blu.`user_id`=u.`id`
    LEFT JOIN (SELECT line_id,COUNT(0) atmCount FROM banknote_line_atm ORDER BY line_id)AS c ON c.line_id=bl.`id`
    where bl.state = 1
    GROUP BY bl.`id`)AS t
    where t.library_id = #{libraryId,jdbcType=INTEGER}
    <if test="_parameter != null">
      and t.username like #{username,jdbcType=VARCHAR}
    </if>
    order by t.id
  </select>

  <select id="getUserByLineName" resultMap="UserSimple">
    SELECT u.`id`, u.`name` FROM banknote_line_user blu
    LEFT JOIN USER u ON u.`id`=blu.`user_id`
    WHERE line_id=(SELECT id FROM banknote_line WHERE NAME=#{lineName} AND state=1 AND library_id=#{libraryId})
  </select>

</mapper>